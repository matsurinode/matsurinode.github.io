<!doctype html>
<html lang="zh-CN" class="no-js">

<head>
        <link rel="canonical" href="https://matsurinode.github.io/news/article-30055.htm" />
    <!-- Required Meta Tags Start -->
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>3.7&#8211;Kotlin 课堂：标准函数和静态方法</title>
        <meta name="description" content="3.7.1 标准函数 with、run和apply Kotlin 的标准函数指的是 Standara.kt 文件中定义的函数，任何Kotlin&nbsp; 代码都可以自由调用所有的标准函数。我们已经学" />
        <link rel="icon" href="/assets/website/img/matsurinode/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Required Meta Tags End -->
    <!-- Favicon Tags Start -->
    <meta name="msapplication-TileColor" content="#2b5797">
    <meta name="theme-color" content="#ffffff">
    <!-- Favicon Tags End -->
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/matsurinode/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/matsurinode/main.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KMMQHM2EMD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KMMQHM2EMD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Add your site or application content here -->
    <!-- |==========================================| -->
    <!-- |=====|| Preloader Start ||===============| -->
    <div class="preloader">
        <div class="preloader__content">
            <div class="preloader__wrapper">
                <div class="preloader__spinner"></div>
                <div class="preloader__txt">
                    <span data-text-preloader="M" class="letters-loading">M</span>
                    <span data-text-preloader="a" class="letters-loading">a</span>
                    <span data-text-preloader="t" class="letters-loading">t</span>
                    <span data-text-preloader="s" class="letters-loading">s</span>
                    <span data-text-preloader="u" class="letters-loading">u</span>
                    <span data-text-preloader="r" class="letters-loading">r</span>
                    <span data-text-preloader="i" class="letters-loading">i</span>
                    <span data-text-preloader=" " class="letters-loading">&nbsp;</span>
                    <span data-text-preloader="n" class="letters-loading">n</span>
                    <span data-text-preloader="o" class="letters-loading">o</span>
                    <span data-text-preloader="d" class="letters-loading">d</span>
                    <span data-text-preloader="e" class="letters-loading">e</span>
                </div>
            </div>
        </div>
    </div>
    <!-- |=====|| Preloader End ||=================| -->
    <!-- |==========================================| -->
    <!-- |==========================================| -->
    <!-- |=====|| Header Start ||===============| -->
    <header class="header home1">
        <!-- Header Menu Start -->
        <div class="header__menu">
            <div class="header__menu-wrapper">
                <div class="container_xl_fluid">
                    <div class="header__menu-outer">
                        <div class="row">
                            <div class="col-xxl-3 col-lg-4">
                                <div class="header__logo">
                                    <a href="/">
                                                                            <span>Matsuri Node</span>
                                                                        </a>
                                </div>
                            </div>
                            <div class="col-xxl-6 col-lg-8">
                                <div class="main-menu text-xxl-center text-end">
                                    <nav id="mobile-menu">
                                        <ul>
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                        <li><a href="#">关于</a></li>
                                            <li><a href="#">联系</a></li>
                                        </ul>
                                    </nav>
                                </div>
                                <div class="mobile-menu"></div>
                            </div>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header Menu End -->
    </header>
    <!-- |=====|| Header End ||=================| -->
    <!-- |==========================================| -->
    <main>
        <!-- |==========================================| -->
        <!-- |=====|| Page Title Start ||===============| -->
        <section class="pageTitle1">
            <div class="pageTitle1__bg pageTitle1__bg__02"></div>
            <div class="pageTitle1__breadCrumb">
                <ul>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li><span>正文</span></li>
                </ul>
            </div>
            <div class="pageTitle1__padding">
                <div class="container_m container_l">
                    <div class="row">
                        <div class="col-lg-7">
                            <div class="pageTitle1__heading">
                                <h1>3.7&#8211;Kotlin 课堂：标准函数和静态方法</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- |=====|| Page Title End ||=================| -->
        <!-- |==========================================| -->
        <!-- |==========================================| -->
        <!-- |==========================================| -->
        <!-- |=====|| About Start ||===============| -->
        <section class="about1 content_box_pot_120">
            <div class="content_box_pob_120">
                <div class="container_m container_l content_box_pob_120">
                    <div class="row">
                        <div class="col-md-9">
                                            <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>3.7.1 标准函数 with、run和apply</p> <p style="text-indent:33px;">Kotlin 的标准函数指的是 Standara.kt 文件中定义的函数，任何Kotlin&nbsp; 代码都可以自由调用所有的标准函数。我们已经学习了let 标准函数 ，let 标准函数的主要作用就是配合.? 进行辅助判空处理。</p> <p style="text-indent:33px;"><span style="color:#7c79e5;">下面我们学习新的 标准函数with。with 函数接收两个参数，第一个参数可以是一个任意类型的对象，第二个参数是Lambda表达式。with 函数会在Lambda 表达式中提供第一个参数对象的上下文，并使用Lambda 表达式的最后一行代码作为返回值返回。</span></p> <pre><code class="language-Kotlin">with(obj){             // 这里是 ojb 的上下文             "value" // with 函数的返回值         }</code></pre> <p>这个函数可以让连续调用同一个对象的多个方法时让代码变得更加精简！</p> <p style="text-indent:33px;">我们举个例子，例如创建一个水果列表，将水果列表全部打印出来：</p> <pre><code class="language-Kotlin">fun printFruits(){         val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")         val buffer = StringBuilder()         buffer.append("Start eating fruits. \n")         for (fruit in list) {             buffer.append(fruit).append("\n")         }         buffer.append("Ate all fruits.")         val result = buffer.toString()         println(result)     }</code></pre> <p>我们会得到的打印结果为</p> <p><img fetchpriority="high" decoding="async" alt="" height="220" src="http://img.555519.xyz/uploads/20221230/da7e470a657d5f926bd0155455782a38.jpg"></p> <p>观察上面的代码我们可以看到多次调用了builder 对象的方法，其实这个时候就可以使用with 函数来让代码变得更加简单</p> <pre><code class="language-Kotlin">fun printFruits(){     val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")     val result = with(StringBuilder()) {         append("Start eating fruits. \n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits.")         toString()     }     println(result) }</code></pre> <p>代码乍一看有点迷，这个append 方法怎么来的？ 我们在上面介绍了，with 第一个参数传入的是任意对象也就是StringBuilder ，而第二个参数是一个Lambda 表达式，<span style="color:#7c79e5;">with 函数会在Lambda 表达式中提供第一个参数对象的上下文&nbsp;</span>，&nbsp;这个上下文就是环境的意思，我们就可以调用这个上下文对象内置的方法函数了。也就是说我们在第一个参数传入了什么对象，那么Lambda 表达式内就会拥有这个对象的所有变量和函数，就相当于在对象内部调用函数，所以我们直接调用了StringBuilder&nbsp;对象的append 函数。</p> <p style="text-indent:33px;">接下来我们继续学习另外一个常用的标准函数 run 函数，这个函数和with 作用几乎是一模一样的，就是结构不同，<span style="color:#7c79e5;">with 函数是内置函数形式调用with(obj){} ，run 函数是 obj.run{} ，一个是通过传入对象，一个是通过对象调用，作用相同，也是Lambda表达式内包含上下文环境，最后一句代码为返回值，run 函数只有一个参数就是Lambda 表达式。我们来修改一下上面的代码：</span></p> <pre><code class="language-Kotlin">fun printFruits(){     val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")     val result = StringBuilder().run {         append("Start eating fruits. \n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits.")         toString()     }     println(result) }</code></pre> <p style="text-indent:33px;"><span style="color:#7c79e5;">接下来学习本小节的最后一个函数 apply 函数，apply 函数和 run 函数基本相同，不同的地方在于，apply 会返回对象本身，Lambda 表达式内不存在返回值，也是在Lambda 表达式中提供对象的上下文，结构为 obj.apply{}。我们来修改一下代码：</span></p> <pre><code class="language-Kotlin">fun printFruits(){     val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")     val result = StringBuilder().apply {         append("Start eating fruits. \n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits.")     }     println(result.toString()) }</code></pre> <p>可以看出来我们删掉了otString() 而在输出的时候 调用了 result.toString()，因为返回的是StringBuilder 对象的本身。</p> <p>这里我们就可以修改一下之前我们启动Activity 的代码了！</p> <pre><code class="language-Kotlin">companion object{         fun actionStart(context:Context,data1:String,data2:String){             val intent = Intent(context,SecondActivity::class.java).apply {                 putExtra("param1",data1)                 putExtra("param2",data2)             }             context.startActivity(intent)         }     } </code></pre> <p>怎么样？是不是又精简了很多。</p> <p>3.7.2 定义静态方法</p> <p style="text-indent:33px;">Java 中定义静态方法很简单，只需要在方法 返回值关键字前添加static 修饰符即可，通过类名.方法名调用。例如：</p> <pre><code class="language-java">public class Util {     public static void doAction(){         System.out.println("do action");     } } </code></pre> <p>我们在Kotlin 中是没有这个static 修饰符的，Kotlin 极度弱化了静态方法的概念，我们想要在一个类中定义一个静态方法反倒是一件麻烦的事，因为Kotlin 提供了一个更好的语法特性，单例类。</p> <pre><code class="language-Kotlin">object Util {     fun doAction(){         println("do action")     } }</code></pre> <p>单例类的特性是在第一次调用的时候会创建这个类，其调用函数的方式和调用静态类中的调用方式相同。但是如果我们想要在一个非单例类中调用一个静态方法怎么办？就类似之前我们写的启动Activity 方式，这就运用到了<span style="color:#3399ea;"><strong>companion object</strong></span>了，由于之前都已经使用过了，这里直接解释原理。</p> <p style="text-indent:33px;"><span style="color:#3399ea;"><strong>companion object&nbsp;</strong></span><span style="color:#7c79e5;"> 会代码块内的函数和变量会直接被编译成静态的，但是一个类 使用了</span><span style="color:#3399ea;"><strong>companion object&nbsp;</strong></span><span style="color:#7c79e5;">关键字后，那么这个类就会创建一个伴生类，类似于</span><span style="color:#3399ea;"><strong> 匿名内部类&nbsp;</strong></span><span style="color:#7c79e5;">，既然类似于</span><span style="color:#3399ea;"><strong>匿名内部类</strong></span><span style="color:#7c79e5;">&nbsp;，那么就可以去继承其他的类：</span></p> <pre><code class="language-Kotlin">class Util {     fun doAction(){         println("do action1")     }     companion object:Father(){         fun doAction1(){             println("do action2")         }     } }</code></pre> <p>但是如果在Java 中以静态方法的形式调用，会发现这个方法并不存在，因为在伴生类中所以编译会有差异，如果我们在<span style="color:#3399ea;"><strong>companion object&nbsp;</strong></span>内部函数上添加<strong><span style="color:#3399ea;">@jvmStatic</span></strong> 注解，那么Kotlin 编译器就会将这个方法编译成真正的静态方法！</p> <pre><code class="language-Kotlin">class Util {     fun doAction(){         println("do action1")     }     companion object:Father(){         @JvmStatic         fun doAction1(){             println("do action2")         }     } }</code></pre> <p>这样添加注解后使用Java 代码也可以调用了。</p> <p style="text-indent:33px;"><span style="color:#7c79e5;">另外我们定义的顶层方法也是会被编译成静态方法的，什么是顶层方法呢？就是在 类外面定义的方法，就如同我们在Kotlin 中间中定义的main 方法一样，只要定义了这种函数，我们在Kotlin 中的任意类或者文件都是直接可以调用的，不用管包名，不用管路径，也不用创建实例 ，直接键入 函数即可。</span>但是在Java 中不存在顶层函数的概念，会找不到这个函数的，Java 需要通过文件名Kt.函数名的方式调用。</p> <pre><code class="language-java">public void quote(){         KotlinKt.printFruits();     }</code></pre> <p style="text-indent:33px;">任何有顶层函数的class 文件&nbsp;都会变成.kt 文件哦。</p> <p>&nbsp;</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-29640.htm">shell编程中for循环语句的实现过程及案例_linux shell_</a></p>
                                        <p>下一个：<a href="/news/article-30056.htm">给猫打狂犬疫苗去哪里（给猫打狂犬疫苗在哪个部位打）</a></p>
                                    </div>
                                        </div>
                        <div class="col-md-3">
                            <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-18-free-high-speed-nodes.htm" title="Matsuri Node节点订阅每天更新19.9M/S免费节点订阅链接">Matsuri Node节点订阅每天更新19.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-node-share.htm" title="Matsuri Node节点订阅每天更新19.2M/S免费节点订阅链接">Matsuri Node节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-high-speed-nodes.htm" title="Matsuri Node节点订阅每天更新22.6M/S免费节点订阅链接">Matsuri Node节点订阅每天更新22.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-20848.htm" title="被猫抓伤以后多长时间打疫苗有效（被猫抓了之后多长时间打疫苗）">被猫抓伤以后多长时间打疫苗有效（被猫抓了之后多长时间打疫苗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-node-share.htm" title="Matsuri Node节点订阅每天更新18.6M/S免费节点订阅链接">Matsuri Node节点订阅每天更新18.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-19471.htm" title="Halo 开源项目学习实体类与数据表">Halo 开源项目学习实体类与数据表</a></li>
                        <li class="py-2"><a href="/news/article-23137.htm" title="如何阅读一份源代码">如何阅读一份源代码</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-22-node-share-links.htm" title="Matsuri Node节点订阅每天更新20.2M/S免费节点订阅链接">Matsuri Node节点订阅每天更新20.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-free-node-subscribe-links.htm" title="Matsuri Node节点订阅每天更新18.3M/S免费节点订阅链接">Matsuri Node节点订阅每天更新18.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-free-subscribe-node.htm" title="Matsuri Node节点订阅每天更新18.7M/S免费节点订阅链接">Matsuri Node节点订阅每天更新18.7M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- |=====|| About End ||=================| -->
        <!-- |==========================================| -->
        <!-- |==========================================| -->
    </main>
        <!-- |==========================================| -->
    <!-- |=====|| Footer Start ||===============| -->
    <footer class="footer1">
        <div class="footer1__bottom">
            <div class="container_m_30 container_l">
                <div class="row">
                    <div class="col-md-12 col_padding">
                        <div class="footer1__bottom__copyRight text-center">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p><a href="/">Matsuri Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress</p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8 col_padding">
                        <div class="footer1__bottom__nav text-center text-lg-start">
                            <a href="#">Customer Support</a>
                            <a href="#">Terms & Conditions</a>
                            <a href="#">Privacy Policy</a>
                        </div>
                    </div>
                    <div class="col-lg-4 col_padding">
                        <div class="footer1__bottom__social text-center text-lg-end">
                            <a href="#"><i class="fab fa-facebook-f"></i></a>
                            <a href="#"><i class="fab fa-twitter"></i></a>
                            <a href="#"><i class="fab fa-linkedin-in"></i></a>
                            <a href="#"><i class="fab fa-instagram"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- |=====|| Footer End ||=================| -->
    <!-- |==========================================| -->
    <!-- |==========================================| -->
    <!-- |=====|| ScrollToTop Start ||===============| -->
    <a href="#" class="scrollToTop">
        <i class="fas fa-level-up-alt"></i>
    </a>
    <!-- |=====|| ScrollToTop End ||=================| -->
    <!-- |==========================================| -->
    <!-- |==========================================| -->
    <!-- |=====|| All js here ||===============| -->
    <script src="/assets/website/js/frontend/matsurinode/modernizr-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery-3.6.2.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/popper.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/plugins.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/slick.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/wow.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.counterup.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.fancybox.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/jquery.meanmenu.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/one-page-nav-min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/feather.min.js"></script>
    <script src="/assets/website/js/frontend/matsurinode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
    <!-- |=====|| All js End ||=================| -->
    <!-- |==========================================| -->
</body>

</html>